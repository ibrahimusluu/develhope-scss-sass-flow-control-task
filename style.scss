/* QUESTION from PLATFORM:
Add a new section to the layout as the picture displays. The boxes are squares of 45px per side (to be converted into rem) and their alignment is performed with flex rules. 
The background color, the color,
and the font-size can be handled using the flow control (@for, @if, etc...) and the darken and lighten methods (the numbers have a multiplier equal to 5) In particular,
you need to create the classes .fs-1rem,
.fs-2rem e .fs-3rem using @each The added colors are black and white only
*/

/*
Suggerimento @for $var from 1 to 20 {
    ... @if $var ==10 {
        ...
    }
}
*/

@use "sass:color";
@use "module.scss" as m;

$scss-font-size: m.toRem(24); 
$scss-red: color.adjust(red);
$scss-blue: color.adjust(blue);
$scss-green: color.adjust(green);

.debug {
    border: m.toRem(1) solid color.adjust(red);
}

@mixin article($color, $border-color, $font-size: 1rem) {
    border: m.toRem(1) solid $border-color;
    padding: m.toRem(20);
    div {
        &:first-child {
            // text-align: center;
            h1 {
                margin: 0;
                color: $color;
                text-decoration: underline;
                text-decoration-color: $scss-blue;
            }
            h2 {
                @extend h1;
                margin: 2rem;
                span {
                    padding: 1rem;
                    border: m.toRem(1) solid $scss-red;
                }
            }
        }
        &.paragraphs {
            display: flex;
            text-align: center;
            p {
                border: m.toRem(1) solid $color;
                padding: m.toRem(35);
                &:nth-child(odd) {
                    color: $scss-blue;
                }
                &:nth-child(even) {
                    color: $border-color;
                }
            }
        }
        &.footer {
            border: m.toRem(1) solid $scss-blue;
            font-size: $font-size;
            color: $color;
            text-align: center;
            padding: m.toRem(20);
        }
    }

    .title {
        text-align: center;
    }

    .numbers {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        div {
            @for $i from 1 to 20 {
                &:nth-child(#{$i}) {
                    background-color: darken($color: white, $amount: $i * 5%); // $i * 5% --> "Error: Positional arguments must come before keyword arguments."
                    color: lighten($color: black, $amount: $i * 5%);
                    border: m.toRem(1) solid color.adjust(red);
                    width: m.toRem(45);
                    height: m.toRem(45);
                }

                @if $i == 10 {
                    &:nth-child(#{$i}) {
                        color: red;
                        background-color: blue;
                    }
                }
            }
            
        }
    }
}

$nums: 1, 2, 3; // , 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

@each $i in $nums {
    .fs-#{$i}rem {
        font-size: m.toRem(16 * $i);
    }
}

// @for $i from 1 through 3 {
//     .numbers:nth-child(3n + #{$i}) {
//             background-color: lighten($base-color, $i * 5%);
//     }
// }

body {
    @include article($scss-green, $scss-red, $scss-font-size);
}

/*
"You are missing the classes you need to generate using a for loop, for the styling of the numbers. 
And you'rem issing the .fs-1rem fs-2rem and .fs-3rem classes too, that can be created using the @each in SCSS"
*/